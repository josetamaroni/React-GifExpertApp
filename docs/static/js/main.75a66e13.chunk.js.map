{"version":3,"sources":["components/AppCategory.js","components/GifGridItem.js","helpers/shareGifs.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AppCategory","categorias","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","includes","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","src","alt","onClick","objeto","text","navigator","share","then","console","log","catch","err","alert","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","imgs","useFetchGifs","GifExpertApp","setCategoria","cat","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,WAAWC,EAAmB,EAAnBA,cAAmB,EAEnBC,mBAAS,IAFU,mBAEhDC,EAFgD,KAEpCC,EAFoC,KAkBvD,OACI,sBAAKC,UAAU,YAAf,UACI,8CACA,uBAAMC,SAdI,SAACC,GACfA,EAAEC,iBAEER,EAAWS,SAASN,EAAWO,SAE/BP,EAAWO,OAAOC,OAAS,IAC3BV,GAAe,SAAAW,GAAI,OAAKT,GAAL,mBAAmBS,OACtCR,EAAc,MAOd,UACI,4CACA,uBACIS,KAAK,OACLC,MAASX,EACTY,SAtBI,SAACR,GACjBH,EAAcG,EAAES,OAAOF,iB,QCLlBG,EAAc,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAEtC,OACI,sBAAKF,GAAIA,EAAIb,UAAU,4DAAvB,UACI,qBAAKgB,IAAKD,EAAKE,IAAKH,IACpB,oBAAGI,QAAS,kBCDEC,EDCY,CAACL,MAAMA,EAAMC,IAAIA,EAAIK,KAAK,2BCA1DC,UAAUC,MACZD,UACKC,MAAMH,GACNI,MAAK,kBAAKC,QAAQC,IAAI,uBACtBC,OAAM,SAAAC,GAAG,OAAIC,MAAM,2BAA4BD,OAEpDC,MAAM,4BACNJ,QAAQC,IAAI,8BARS,IAACN,GDCd,cAA+EL,EAA/E,W,uBEPCe,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbhB,EAFa,iDAEoCiB,UAAUF,GAF9C,gEAGAG,MAAOlB,GAHP,cAGbmB,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACH1B,GAAI0B,EAAI1B,GACRC,MAAOyB,EAAIzB,MACXC,IAAKwB,EAAIC,OAAOC,iBAAiB1B,QAVtB,kBAcZsB,GAdY,4CAAH,sDCGPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZjC,mBAAS,CAC/BuC,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAZAC,qBAAW,WACPjB,EAASC,GACRP,MAAM,SAAAwB,GAEHF,EAAS,CACLT,KAAMW,EACNJ,SAAS,SAIlB,CAACb,IAEGc,EDjB0BI,CAAalB,GAAjCU,EAHwB,EAG7BJ,KAAaO,EAHgB,EAGhBA,QAErB,OACI,qCACA,qBAAI3C,UAAU,oCAAd,cAAqD8B,EAArD,OACEa,GAAW,mBAAG3C,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEQwC,EAAOF,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAEEA,GADAA,EAAI1B,aEbpBoC,EAAe,WAAM,MAGKpD,mBAAS,CAAC,cAHf,mBAGvBF,EAHuB,KAGXuD,EAHW,KAK9B,OACI,qCACI,cAAC,EAAD,CAAatD,cAAgBsD,EAAevD,WAAYA,IACxD,uBAEIA,EAAW2C,KAAK,SAAAa,GAAG,OACf,cAAC,EAAD,CAEIrB,SAAUqB,GADLA,U,MCT7BC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.75a66e13.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AppCategory = ({categorias,setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const inputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const btnSubmit = (e) => {\r\n        e.preventDefault();\r\n        // BUSCO DENTRO DE LAS CATEGORIAS SI EXISTE Y NO DEVUELVO NADA\r\n        if( categorias.includes(inputValue.trim()) ) return;\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue,...cats] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"form_form\">\r\n            <h2>GifExpertApp</h2>\r\n            <form onSubmit={ btnSubmit }>\r\n                <span>Search: </span>\r\n                <input \r\n                    type='text'\r\n                    value= { inputValue }\r\n                    onChange={ inputChange }\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nAppCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport { shareGifs } from '../helpers/shareGifs';\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    return (\r\n        <div id={id} className=\"card animate__animated animate__fadeIn animate__slower 5s\">\r\n            <img src={url} alt={title} />\r\n            <p onClick={()=>shareGifs({title:title,url:url,text:'te comparto un gif'})}> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","// El objeto al menos debe tener una propiedad\r\n// const objeto = {\r\n//     title: '',\r\n//     text:'',\r\n//     url:'',\r\n//     files: [file] // puedo compartir mÃ¡s de un archivo\r\n// }\r\nexport const shareGifs = (objeto) => {\r\n  if (navigator.share) {\r\n    navigator\r\n        .share(objeto)\r\n        .then(()=> console.log('Successful share'))\r\n        .catch(err => alert('Does not support sharing', err));\r\n  } else {\r\n    alert('Does not support sharing')\r\n    console.log('Does not support sharing')\r\n  }\r\n}\r\n","\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=100&api_key=kVDysAzfApLqZDIzJh0tt7KuRSTXR7zI`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n    \r\n    // hook custom para mostrar un loading mientras se carga las imagenes\r\n    const { data:images, loading } = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>  \r\n        { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n        <div className='card-grid'>\r\n            {\r\n                images.map( img => { \r\n                    return <GifGridItem \r\n                        key={img.id} \r\n                        { ...img } \r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // EJECUTA UNA SOLA VEZ LA FUNCION\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( imgs => {\r\n                \r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n\r\n        })\r\n    }, [category])\r\n\r\n    return state; // { data: [], loading: true}\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AppCategory,GifGrid } from './components';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categorias, setCategoria] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <AppCategory setCategories={ setCategoria } categorias={categorias}/>\r\n            <hr/>\r\n            {\r\n                categorias.map( cat => (\r\n                    <GifGrid \r\n                        key={cat}\r\n                        category={cat} \r\n                    />\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n// INICIAR: npm start\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}